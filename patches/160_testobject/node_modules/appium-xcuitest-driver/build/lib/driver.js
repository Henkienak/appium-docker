'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeSimctl = require('node-simctl');

var _iosAppUtils = require('ios-app-utils');

var _webdriveragent = require('./webdriveragent');

var _webdriveragent2 = _interopRequireDefault(_webdriveragent);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _simulatorManagement = require('./simulator-management');

var _appiumIosSimulator = require('appium-ios-simulator');

var _asyncbox = require('asyncbox');

var _appiumIosDriver = require('appium-ios-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _utils = require('./utils');

var _realDeviceManagement = require('./real-device-management');

var _iosDeploy = require('./ios-deploy');

var _iosDeploy2 = _interopRequireDefault(_iosDeploy);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _packageJson = require('../../package.json');

// eslint-disable-line import/no-unresolved

var SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';

var NO_PROXY_NATIVE_LIST = [['GET', /context/], ['POST', /context/], ['GET', /window/], ['POST', /window/], ['DELETE', /window/], ['POST', /execute/], ['POST', /element$/], ['POST', /elements$/], ['POST', /timeouts/], ['GET', /alert_text/], ['POST', /alert_text/], ['POST', /accept_alert/], ['POST', /dismiss_alert/], ['GET', /source/], ['POST', /appium/], ['GET', /appium/], ['POST', /touch/], ['POST', /click/], ['GET', /log/], ['POST', /log/], ['POST', /moveto/], ['POST', /receive_async_response/], // always, in case context switches while waiting
['GET', /location/], ['GET', /size/], ['POST', /value/]];
var NO_PROXY_WEB_LIST = [['GET', /title/], ['GET', /url/], ['POST', /url/], ['POST', /element/], ['POST', /back/], ['POST', /forward/], ['GET', /attribute/], ['GET', /text/], ['POST', /clear/], ['GET', /element/], ['POST', /click/], ['POST', /refresh/], ['GET', /cookie/], ['POST', /cookie/], ['DELETE', /cookie/], ['POST', /frame/]].concat(NO_PROXY_NATIVE_LIST);

var XCUITestDriver = (function (_BaseDriver) {
  _inherits(XCUITestDriver, _BaseDriver);

  function XCUITestDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, XCUITestDriver);

    _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    _logger2['default'].debug('XCUITestDriver version: ' + _packageJson.version);

    this.desiredCapConstraints = _desiredCaps2['default'];

    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', '-ios predicate string', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'link text', 'partial link text'];

    this.resetIos();
  }

  _createClass(XCUITestDriver, [{
    key: 'resetIos',
    value: function resetIos() {
      this.opts = this.opts || {};
      this.wda = null;
      this.opts.device = null;
      this.jwpProxyActive = false;
      this.proxyReqRes = null;
      this.jwpProxyAvoid = [];
      this.safari = false;

      // some things that commands imported from appium-ios-driver need
      this.curWebFrames = [];
      this.webElementIds = [];
      this._currentUrl = null;
      this.curContext = null;
      this.xcodeVersion = null;
      this.iosSdkVersion = null;
      this.contexts = [];
      this.implicitWaitMs = 0;
      this.asynclibWaitMs = 0;
      this.pageLoadMs = 6000;
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      var wdaStatus;
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxyCommand('/status', 'GET'));

          case 2:
            wdaStatus = context$2$0.sent;
            return context$2$0.abrupt('return', { wda: wdaStatus });

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSession',
    value: function createSession(caps) {
      var _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.lifecycleData = {}; // this is used for keeping track of the state we start so when we delete the session we can put things back
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'createSession', this).call(this, caps));

          case 4:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            this.opts.sessionId = sessionId;

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.start());

          case 10:

            // merge server capabilities + desired capabilities
            caps = _Object$assign({}, _appiumIosDriver.defaultServerCaps, caps);
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].error(context$2$0.t0);
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 19:
            throw context$2$0.t0;

          case 20:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 14]]);
    }
  }, {
    key: 'start',
    value: function start() {
      var _ref3, device, udid, realDevice;

      return _regeneratorRuntime.async(function start$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.opts.noReset = !!this.opts.noReset;
            this.opts.fullReset = !!this.opts.fullReset;

            if (this.xcodeVersion) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _utils.getAndCheckXcodeVersion)());

          case 5:
            this.xcodeVersion = context$2$0.sent;

            _logger2['default'].debug('Xcode version set to \'' + this.xcodeVersion.versionString + '\'');

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _utils.getAndCheckIosSdkVersion)());

          case 9:
            this.iosSdkVersion = context$2$0.sent;

            _logger2['default'].debug('iOS SDK Version set to \'' + this.iosSdkVersion + '\'');

            if (!(this.opts.platformVersion && parseFloat(this.opts.platformVersion) < 9.3)) {
              context$2$0.next = 13;
              break;
            }

            throw Error('Platform version must be 9.3 or above. \'' + this.opts.platformVersion + '\' is not supported.');

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.determineDevice());

          case 15:
            _ref3 = context$2$0.sent;
            device = _ref3.device;
            udid = _ref3.udid;
            realDevice = _ref3.realDevice;

            _logger2['default'].info('Determining device to run tests on: udid: \'' + udid + '\', real device: ' + realDevice);
            this.opts.device = device;
            this.opts.udid = udid;
            this.opts.realDevice = realDevice;

            // at this point if there is no platformVersion, get it from the device

            if (this.opts.platformVersion) {
              context$2$0.next = 31;
              break;
            }

            if (!(this.opts.device && _lodash2['default'].isFunction(this.opts.device.getPlatformVersion))) {
              context$2$0.next = 31;
              break;
            }

            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.opts.device.getPlatformVersion());

          case 27:
            this.opts.platformVersion = context$2$0.sent;

            _logger2['default'].info('No platformVersion specified. Using device version: \'' + this.opts.platformVersion + '\'');
            context$2$0.next = 31;
            break;

          case 31:
            if (!this.opts.browserName) {
              context$2$0.next = 41;
              break;
            }

            _logger2['default'].info('Safari test requested');
            this.safari = true;
            this.opts.app = undefined;
            this.opts.processArguments = this.opts.processArguments || {};
            this.opts.bundleId = SAFARI_BUNDLE_ID;
            this._currentUrl = this.opts.safariInitialUrl || (this.isRealDevice() ? 'http://appium.io' : 'http://' + this.opts.address + ':' + this.opts.port + '/welcome');
            this.opts.processArguments.args = ['-u', this._currentUrl];
            context$2$0.next = 43;
            break;

          case 41:
            context$2$0.next = 43;
            return _regeneratorRuntime.awrap(this.configureApp());

          case 43:
            if (!this.opts.app) {
              context$2$0.next = 46;
              break;
            }

            context$2$0.next = 46;
            return _regeneratorRuntime.awrap(this.checkAppPresent());

          case 46:
            if (this.opts.bundleId) {
              context$2$0.next = 50;
              break;
            }

            context$2$0.next = 49;
            return _regeneratorRuntime.awrap(this.extractBundleId(this.opts.app));

          case 49:
            this.opts.bundleId = context$2$0.sent;

          case 50:

            // handle logging
            this.logs = {};
            context$2$0.next = 53;
            return _regeneratorRuntime.awrap(this.startLogCapture());

          case 53:

            _logger2['default'].info('Setting up ' + (this.isRealDevice() ? 'real device' : 'simulator'));

            if (this.isRealDevice()) {
              context$2$0.next = 62;
              break;
            }

            context$2$0.next = 57;
            return _regeneratorRuntime.awrap(_appiumIosDriver.settings.setLocale(this.opts.device, this.opts, {}, this.isSafari()));

          case 57:
            this.localeConfig = context$2$0.sent;
            context$2$0.next = 60;
            return _regeneratorRuntime.awrap(_appiumIosDriver.settings.setPreferences(this.opts.device, this.opts, this.isSafari()));

          case 60:
            context$2$0.next = 62;
            return _regeneratorRuntime.awrap(this.startSim());

          case 62:
            context$2$0.next = 64;
            return _regeneratorRuntime.awrap(this.installApp());

          case 64:
            context$2$0.next = 66;
            return _regeneratorRuntime.awrap(this.startWda(this.opts.sessionId, realDevice));

          case 66:
            context$2$0.next = 68;
            return _regeneratorRuntime.awrap(this.setInitialOrientation(this.opts.orientation));

          case 68:
            if (!(this.isSafari() || this.opts.autoWebview)) {
              context$2$0.next = 72;
              break;
            }

            _logger2['default'].debug('Waiting for initial webview');
            context$2$0.next = 72;
            return _regeneratorRuntime.awrap(this.navToInitialWebview());

          case 72:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startWda',
    value: function startWda(sessionId, realDevice) {
      return _regeneratorRuntime.async(function startWda$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.wda = new _webdriveragent2['default'](this.opts);

            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.wda.launch(sessionId, realDevice));

          case 4:
            context$2$0.next = 15;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            if (!((context$2$0.t0.message || '').indexOf('xcodebuild failed with code 65') === -1)) {
              context$2$0.next = 10;
              break;
            }

            throw context$2$0.t0;

          case 10:
            // Xcode error code 65 means that the WDA app is still being installed
            // and xcodebuild can't do its business, so it is reasonable to retry
            _logger2['default'].debug('xcodebuild failure warrants retry. Retrying...');
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.wda.quit());

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.wda.launch(sessionId, realDevice));

          case 15:

            this.proxyReqRes = this.wda.proxyReqRes.bind(this.wda);
            this.jwpProxyActive = true;

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.startWdaSession(this.opts.bundleId, this.opts.processArguments));

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }

    // create an alias so we can actually unit test createSession by stubbing
    // this
  }, {
    key: 'extractBundleId',
    value: function extractBundleId(app) {
      return _regeneratorRuntime.async(function extractBundleId$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _iosAppUtils.extractBundleId)(app));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.stop());

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'deleteSession', this).call(this));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.jwpProxyActive = false;
            this.proxyReqRes = null;

            if (!(this.wda && this.wda.jwproxy)) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proxyCommand('/session/' + this.sessionId, 'DELETE'));

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.wda.quit());

          case 7:
            if (!this.isWebContext()) {
              context$2$0.next = 11;
              break;
            }

            _logger2['default'].debug('In a web session. Removing remote debugger');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.stopRemote());

          case 11:
            if (!this.isRealDevice()) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 14;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.runRealDeviceReset)(this.opts.device, this.opts));

          case 14:
            context$2$0.next = 18;
            break;

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.runSimulatorReset)(this.opts.device, this.opts));

          case 18:
            if (!(!this.opts.noReset && !!this.opts.device)) {
              context$2$0.next = 28;
              break;
            }

            _logger2['default'].debug('Resetting simulator');

            if (!this.lifecycleData.bootSim) {
              context$2$0.next = 24;
              break;
            }

            _logger2['default'].debug('Shutting down simulator');
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.opts.device.shutdown());

          case 24:
            if (!this.lifecycleData.createSim) {
              context$2$0.next = 28;
              break;
            }

            _logger2['default'].debug('Deleting simulator created for this run');
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.opts.device['delete']());

          case 28:

            if (!_lodash2['default'].isEmpty(this.logs)) {
              this.logs.syslog.stopCapture();
              this.logs = {};
            }

            this.resetIos();

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      var _get2;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Executing command \'' + cmd + '\'');

            if (!(cmd === 'receiveAsyncResponse')) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.receiveAsyncResponse.apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((_get2 = _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 7:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAppPresent',
    value: function checkAppPresent() {
      return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Checking whether app is actually present");
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find app at ' + this.opts.app);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'configureApp',
    value: function configureApp() {
      var appIsPackageOrBundle;
      return _regeneratorRuntime.async(function configureApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            appIsPackageOrBundle = function appIsPackageOrBundle(app) {
              return (/^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app)
              );
            };

            if (!(!this.opts.bundleId && appIsPackageOrBundle(this.opts.app))) {
              context$2$0.next = 4;
              break;
            }

            this.opts.bundleId = this.opts.app;
            return context$2$0.abrupt('return');

          case 4:
            if (!(this.opts.bundleId && appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === '' || appIsPackageOrBundle(this.opts.app)))) {
              context$2$0.next = 7;
              break;
            }

            _logger2['default'].debug('App is an iOS bundle, will attempt to run as pre-existing');
            return context$2$0.abrupt('return');

          case 7:
            if (!(this.opts.app && this.opts.app.toLowerCase() === 'settings')) {
              context$2$0.next = 13;
              break;
            }

            this.opts.bundleId = 'com.apple.Preferences';
            this.opts.app = null;
            return context$2$0.abrupt('return');

          case 13:
            if (!(this.opts.app && this.opts.app.toLowerCase() === 'calendar')) {
              context$2$0.next = 17;
              break;
            }

            this.opts.bundleId = 'com.apple.mobilecal';
            this.opts.app = null;
            return context$2$0.abrupt('return');

          case 17:
            context$2$0.prev = 17;
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, '.app', this.opts.mountRoot, this.opts.windowsShareUserName, this.opts.windowsSharePassword));

          case 20:
            this.opts.app = context$2$0.sent;
            context$2$0.next = 27;
            break;

          case 23:
            context$2$0.prev = 23;
            context$2$0.t0 = context$2$0['catch'](17);

            _logger2['default'].error(context$2$0.t0);
            throw new Error('Bad app: ' + this.opts.app + '. App paths need to be absolute, or relative to the appium ' + 'server install dir, or a URL to compressed file, or a special app name.');

          case 27:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[17, 23]]);
    }
  }, {
    key: 'determineDevice',
    value: function determineDevice() {
      var _device, devices, _device2, device;

      return _regeneratorRuntime.async(function determineDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // in the one case where we create a sim, we will set this state
            this.lifecycleData.createSim = false;

            // if we get generic names, translate them
            this.opts.deviceName = (function translateDeviceName() {
              var dn = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

              var deviceName = dn;
              if (dn.toLowerCase() === 'iphone simulator') {
                deviceName = 'iPhone 6';
              } else if (dn.toLowerCase() === 'ipad simulator') {
                deviceName = 'iPad 2';
              }
              if (deviceName !== dn) {
                _logger2['default'].debug('Changing deviceName from \'' + dn + '\' to \'' + deviceName + '\'');
              }
              return deviceName;
            })(this.opts.deviceName);

            // check for a particular simulator
            context$2$0.t0 = this.opts.udid;

            if (!context$2$0.t0) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.simExists)(this.opts.udid));

          case 6:
            context$2$0.t0 = context$2$0.sent;

          case 7:
            if (!context$2$0.t0) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(this.opts.udid));

          case 10:
            _device = context$2$0.sent;
            return context$2$0.abrupt('return', { device: _device, realDevice: false, udid: this.opts.udid });

          case 12:
            if (!this.opts.udid) {
              context$2$0.next = 29;
              break;
            }

            if (!(this.opts.udid.toLowerCase() === 'auto')) {
              context$2$0.next = 19;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _utils.detectUdid)());

          case 16:
            this.opts.udid = context$2$0.sent;
            context$2$0.next = 25;
            break;

          case 19:
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.getConnectedDevices)());

          case 21:
            devices = context$2$0.sent;

            _logger2['default'].debug('Available devices: ' + devices.join(', '));

            if (!(devices.indexOf(this.opts.udid) === -1)) {
              context$2$0.next = 25;
              break;
            }

            throw new Error('Unknown device or simulator UDID: \'' + this.opts.udid + '\'');

          case 25:
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.getIDeviceObj());

          case 27:
            _device2 = context$2$0.sent;
            return context$2$0.abrupt('return', { device: _device2, realDevice: true, udid: this.opts.udid });

          case 29:
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.getExistingSim)(this.opts.deviceName, this.opts.platformVersion));

          case 31:
            device = context$2$0.sent;

            if (!device) {
              context$2$0.next = 40;
              break;
            }

            if (!(this.opts.reset || this.opts.fullReset)) {
              context$2$0.next = 39;
              break;
            }

            _logger2['default'].debug('Full reset requested. Cleaning and stopping simulator');
            context$2$0.next = 37;
            return _regeneratorRuntime.awrap(device.clean());

          case 37:
            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(device.shutdown());

          case 39:
            return context$2$0.abrupt('return', { device: device, realDevice: false, udid: device.udid });

          case 40:

            // no device of this type exists, so create one
            _logger2['default'].info('Simluator udid not provided, using desired caps to create a new simulator');
            if (!this.opts.platformVersion) {
              _logger2['default'].info('No platformVersion specified. Using latest version \'' + this.iosSdkVersion + '\'');
              this.opts.platformVersion = this.iosSdkVersion;
            }
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(this.createSim());

          case 44:
            device = context$2$0.sent;
            return context$2$0.abrupt('return', { device: device, realDevice: false, udid: device.udid });

          case 46:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSim',
    value: function startSim() {
      return _regeneratorRuntime.async(function startSim$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.simBooted)(this.opts.device));

          case 2:
            if (context$2$0.sent) {
              context$2$0.next = 11;
              break;
            }

            _logger2['default'].info('Simulator with udid \'' + this.opts.udid + '\' not booted. Booting up now');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.killAllSimulators)());

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.opts.device.run());

          case 8:
            this.lifecycleData.bootSim = true;
            context$2$0.next = 13;
            break;

          case 11:
            _logger2['default'].info('Simulator with udid \'' + this.opts.udid + '\' already booted');
            this.lifecycleData.bootSim = false;

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSim',
    value: function createSim() {
      var sim;
      return _regeneratorRuntime.async(function createSim$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.lifecycleData.createSim = true;

            // create sim for caps
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.createSim)(this.caps, this.sessionId));

          case 3:
            sim = context$2$0.sent;

            _logger2['default'].info('Created simulator with udid \'' + sim.udid + '\'.');

            return context$2$0.abrupt('return', sim);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launchApp',
    value: function launchApp() {
      var APP_LAUNCH_TIMEOUT, checkStatus, retries;
      return _regeneratorRuntime.async(function launchApp$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            APP_LAUNCH_TIMEOUT = 20 * 1000;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.launch)(this.opts.device.udid, this.opts.bundleId));

          case 3:
            checkStatus = function checkStatus() {
              var response, currentApp;
              return _regeneratorRuntime.async(function checkStatus$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.proxyCommand('/status', 'GET'));

                  case 2:
                    response = context$3$0.sent;
                    currentApp = response.currentApp.bundleID;

                    if (!(currentApp !== this.opts.bundleId)) {
                      context$3$0.next = 6;
                      break;
                    }

                    throw new Error(this.opts.bundleId + ' not in foreground. ' + currentApp + ' is in foreground');

                  case 6:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };

            _logger2['default'].info('Waiting for \'' + this.opts.bundleId + '\' to be in foreground');
            retries = parseInt(APP_LAUNCH_TIMEOUT / 200, 10);
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 200, checkStatus));

          case 8:
            _logger2['default'].info(this.opts.bundleId + ' is in foreground');

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startWdaSession',
    value: function startWdaSession(bundleId, processArguments) {
      var args, env, desired;
      return _regeneratorRuntime.async(function startWdaSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = processArguments ? processArguments.args : [];
            env = processArguments ? processArguments.env : {};
            desired = {
              desiredCapabilities: {
                bundleId: bundleId,
                arguments: args,
                environment: env,
                shouldWaitForQuiescence: true
              }
            };
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proxyCommand('/session', 'POST', desired));

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // Override Proxy methods from BaseDriver
  }, {
    key: 'proxyActive',
    value: function proxyActive() {
      return this.jwpProxyActive;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList() {
      if (this.isWebview()) {
        return NO_PROXY_WEB_LIST;
      }
      return NO_PROXY_NATIVE_LIST;
    }
  }, {
    key: 'canProxy',
    value: function canProxy() {
      return true;
    }
  }, {
    key: 'isSafari',
    value: function isSafari() {
      return !!this.safari;
    }
  }, {
    key: 'isRealDevice',
    value: function isRealDevice() {
      return this.opts.realDevice;
    }
  }, {
    key: 'isSimulator',
    value: function isSimulator() {
      return !this.opts.realDevice;
    }
  }, {
    key: 'isWebview',
    value: function isWebview() {
      return this.isSafari() || this.isWebContext();
    }
  }, {
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'validateLocatorStrategy', this).call(this, strategy, this.isWebContext());
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      // check with the base class, and return if it fails
      var res = _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
      if (!res) return res;

      // make sure that the capabilities have one of `app` or `bundleId`
      if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
        var msg = 'The desired capabilities must include either an app or a bundleId for iOS';
        _logger2['default'].errorAndThrow(msg);
      }

      var verifyProcessArgument = function verifyProcessArgument(processArguments) {
        if (!_lodash2['default'].isNil(processArguments.args) && !_lodash2['default'].isArray(processArguments.args)) {
          _logger2['default'].errorAndThrow('processArguments.args must be an array of string');
        }

        if (!_lodash2['default'].isNil(processArguments.env) && !_lodash2['default'].isObject(caps.processArguments.env)) {
          _logger2['default'].errorAndThrow('processArguments.env must be an object <key,value> pair {a:b, c:d}');
        }
      };

      // `processArguments` should be JSON string or an object with arguments and/ environment details
      if (caps.processArguments) {
        if (_lodash2['default'].isString(caps.processArguments)) {
          try {
            // try to parse the string as JSON
            caps.processArguments = JSON.parse(caps.processArguments);
            verifyProcessArgument(caps.processArguments);
          } catch (err) {
            _logger2['default'].errorAndThrow('processArguments must be a json format or an object with format {arguments : [], environment : {a:b, c:d}}. Both environment and argument can be null. Error : ' + err);
          }
        } else if (_lodash2['default'].isObject(caps.processArguments)) {
          verifyProcessArgument(caps.processArguments);
        } else {
          _logger2['default'].errorAndThrow('processArguments must be an object, or a string JSON object with format {arguments : [], environment : {a:b, c:d}}. Both environment and argument can be null.');
        }
      }

      // there is no point in having `keychainPath` without `keychainPassword`
      if (caps.keychainPath && !caps.keychainPassword || !caps.keychainPath && caps.keychainPassword) {
        _logger2['default'].errorAndThrow('If \'keychainPath\' is set, \'keychainPassword\' must also be set (and vice versa).');
      }

      // finally, return true since the superclass check passed, as did this
      return true;
    }
  }, {
    key: 'installApp',
    value: function installApp() {
      var pause;
      return _regeneratorRuntime.async(function installApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isSafari()) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return');

          case 2:
            if (!(this.opts.autoLaunch === false)) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return');

          case 4:
            if (!this.isRealDevice()) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.installToRealDevice());

          case 7:
            context$2$0.next = 11;
            break;

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.installToSimulator());

          case 11:
            if (!_appiumSupport.util.hasValue(this.opts.iosInstallPause)) {
              context$2$0.next = 15;
              break;
            }

            pause = parseInt(this.opts.iosInstallPause, 10);
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(pause));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'installToSimulator',
    value: function installToSimulator() {
      return _regeneratorRuntime.async(function installToSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.opts.fullReset && this.opts.bundleId)) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].debug('Full reset requested. Removing app from device');
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.removeApp)(this.opts.device.udid, this.opts.bundleId));

          case 4:
            _logger2['default'].debug('Installing app \'' + this.opts.app + '\' on device');
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.installApp)(this.opts.device.udid, this.opts.app));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'installToRealDevice',
    value: function installToRealDevice() {
      return _regeneratorRuntime.async(function installToRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.udid) {
              context$2$0.next = 25;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.opts.device.isInstalled(this.opts.bundleId));

          case 3:
            if (!context$2$0.sent) {
              context$2$0.next = 15;
              break;
            }

            _logger2['default'].debug("App is installed.");

            if (!this.opts.fullReset) {
              context$2$0.next = 11;
              break;
            }

            _logger2['default'].debug('Full reset requested. Forcing app install after uninstall app');
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.opts.device.remove(this.opts.bundleId));

          case 9:
            context$2$0.next = 13;
            break;

          case 11:
            _logger2['default'].debug('Full reset not requested. No need to install.');
            return context$2$0.abrupt('return');

          case 13:
            context$2$0.next = 16;
            break;

          case 15:
            _logger2['default'].debug('App is not installed. Will try to install.');

          case 16:
            if (!this.opts.app) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.opts.device.install(this.opts.app));

          case 19:
            _logger2['default'].debug('App installed.');
            context$2$0.next = 23;
            break;

          case 22:
            _logger2['default'].debug("Real device specified but no ipa or app path, assuming bundle ID is " + "on device");

          case 23:
            context$2$0.next = 26;
            break;

          case 25:
            _logger2['default'].debug("No device id or app, not installing to real device.");

          case 26:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getIDeviceObj',
    value: function getIDeviceObj() {
      var iDevice, msg;
      return _regeneratorRuntime.async(function getIDeviceObj$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Creating iDevice object with udid ' + this.opts.udid);
            context$2$0.prev = 1;
            iDevice = new _iosDeploy2['default'](this.opts.udid);
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(iDevice.checkStatus());

          case 5:
            return context$2$0.abrupt('return', iDevice);

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](1);
            msg = "Could not initialize ios-deploy make sure it is " + "installed and works on your system";

            _logger2['default'].error(msg);
            throw new Error(msg);

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 8]]);
    }
  }, {
    key: 'setInitialOrientation',
    value: function setInitialOrientation(orientation) {
      return _regeneratorRuntime.async(function setInitialOrientation$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(typeof orientation === 'string')) {
              context$2$0.next = 15;
              break;
            }

            orientation = orientation.toUpperCase();

            if (_lodash2['default'].includes(['LANDSCAPE', 'PORTRAIT'], orientation)) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].debug('Unable to set initial orientation to \'' + orientation + '\'');
            return context$2$0.abrupt('return');

          case 5:
            _logger2['default'].debug('Setting initial orientation to \'' + orientation + '\'');
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.proxyCommand('/orientation', 'POST', { orientation: orientation }));

          case 9:
            this.opts.curOrientation = orientation;
            context$2$0.next = 15;
            break;

          case 12:
            context$2$0.prev = 12;
            context$2$0.t0 = context$2$0['catch'](6);

            _logger2['default'].warn('Setting initial orientation failed with: ' + context$2$0.t0);

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 12]]);
    }
  }, {
    key: 'driverData',
    get: function get() {
      // TODO fill out resource info here
      return {};
    }
  }]);

  return XCUITestDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {

  for (var _iterator = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    XCUITestDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

exports['default'] = XCUITestDriver;
exports.XCUITestDriver = XCUITestDriver;

// TODO add validation on caps
// TODO handle otherSessionData for multiple sessions

// TODO: this is when it is a real device. when we have a real object wire it in

// fail very early if the app doesn't actually exist

// the app name is a bundleId assign it to the bundleId property

// we have a bundle ID, but no app, or app is also a bundle

// check for supported build-in apps

// download if necessary

// check for a particular real device

// make sure it is a connected device. If not, the udid passed in is invalid

// figure out the correct simulator to use, given the desired capabilities

// check for an existing simulator

// TODO for now just kill all sims unless specified udid is booted.
// if booted, use it. if not booted, start it up
// if no udid, well lets see if we can start one up based on desired caps
// if we support multiple sims we need to change this

// if user has passed in desiredCaps.autoLaunch = false
// meaning they will manage app install / launching

// https://github.com/appium/appium/issues/6889

//This iDevice object could be ideviceinstaller (node-idevice) for future once we have ideviceinstaller working for ios 10
//# sourceMappingURL=data:application/json;charset=utf8;base64,
