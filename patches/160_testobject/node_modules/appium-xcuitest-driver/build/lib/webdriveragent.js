'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumLogger = require('appium-logger');

var _simulatorManagementJs = require('./simulator-management.js');

var agentLog = (0, _appiumLogger.getLogger)('WebDriverAgent');
var xcodeLog = (0, _appiumLogger.getLogger)('Xcode');
var iproxyLog = (0, _appiumLogger.getLogger)('iProxy');

var AGENT_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent', 'WebDriverAgent.xcodeproj');
var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent');
var AGENT_LOG_PREFIX = 'XCTStubApps[';
var AGENT_RUNNER_LOG_PREFIX = 'XCTRunner[';
var SIM_BRIDGE_LOG_PREFIX = 'CoreSimulatorBridge[';
var AGENT_STARTED_REGEX = /ServerURLHere->(.*)<-ServerURLHere/;
var LOG_STARTTIME_REGEX = /Built at (\w{3} [\d\s]\d \d{4} \d{2}:\d{2}:\d{2})/;
var REAL_DEVICE_LOGGER_PATH = 'idevicesyslog';

var WebDriverAgent = (function () {

  // agentPath (optional): Path to WebdriverAgent Executable (inside WebDriverAgent.app)

  function WebDriverAgent() {
    var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, WebDriverAgent);

    if (args.agentPath) {
      _logger2['default'].info('Custom agent path specified: ' + args.agentPath);
    } else {
      _logger2['default'].info('Using default agent: ' + AGENT_PATH);
    }

    if (args.bootstrapPath) {
      _logger2['default'].info('Custom bootstrap path specified: ' + args.bootstrapPath);
    } else {
      _logger2['default'].info('Using default bootstrap: ' + BOOTSTRAP_PATH);
    }

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.agentPath = args.agentPath || AGENT_PATH;
    this.bootstrapPath = args.bootstrapPath || BOOTSTRAP_PATH;
    this.realDeviceLogger = args.realDeviceLogger || REAL_DEVICE_LOGGER_PATH;
    this.wdaLocalPort = args.wdaLocalPort;
    this.iosLogAlreadyShown = args.showIOSLog;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;
    this.webDriverAgentUrl = args.webDriverAgentUrl;
  }

  _createClass(WebDriverAgent, [{
    key: 'launch',
    value: function launch(sessionId) {
      var agentUrl, localport;
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.webDriverAgentUrl) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].info('Using provided WebdriverAgent at \'' + this.webDriverAgentUrl + '\'');
            this.url = _url2['default'].parse(this.webDriverAgentUrl);
            this.setupProxy(sessionId);
            return context$2$0.abrupt('return', this.webDriverAgentUrl);

          case 5:

            _logger2['default'].info('Launching WebDriverAgent on the device');

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 8:
            if (context$2$0.sent) {
              context$2$0.next = 10;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.destroyXcodeProcesses());

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.checkForDependencies());

          case 14:
            if (!this.realDevice) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.createRealDeviceLogsSubProcess());

          case 17:
            this.deviceLogs = context$2$0.sent;
            context$2$0.next = 23;
            break;

          case 20:
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.createSimLogsSubProcess());

          case 22:
            this.deviceLogs = context$2$0.sent;

          case 23:
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess());

          case 25:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.startXcodebuild());

          case 28:
            agentUrl = context$2$0.sent;

            this.url = _url2['default'].parse(agentUrl);

            this.url.hostname = 'localhost';

            if (!this.realDevice) {
              context$2$0.next = 37;
              break;
            }

            localport = this.wdaLocalPort || this.url.port;

            this.iproxy = this.createiProxySubProcess(localport, this.url.port);
            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(this.startiproxy());

          case 36:
            this.url.port = localport;

          case 37:

            this.setupProxy(sessionId);

            return context$2$0.abrupt('return', agentUrl);

          case 39:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxy',
    value: function setupProxy(sessionId) {
      this.jwproxy = new _appiumBaseDriver.JWProxy({ server: this.url.hostname, port: this.url.port, base: '' });
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    }
  }, {
    key: 'destroyXcodeProcesses',
    value: function destroyXcodeProcesses() {
      var _ref, stdout, match;

      return _regeneratorRuntime.async(function destroyXcodeProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('ps', ['-ax']));

          case 3:
            _ref = context$2$0.sent;
            stdout = _ref.stdout;
            match = /(\d+)\s.+?(?=xcodebuild)/.exec(stdout);

            if (match) {
              _logger2['default'].info('killing xcodebuild process: ' + match[1]);
              process.kill(match[1]);
            }
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].error('Could not get xcodebuild processes: ' + context$2$0.t0);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 9]]);
    }
  }, {
    key: 'checkForDependencies',
    value: function checkForDependencies() {
      var carthagePath;
      return _regeneratorRuntime.async(function checkForDependencies$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.which('carthage'));

          case 3:
            carthagePath = context$2$0.sent;

            _logger2['default'].debug('Carthage found: ' + carthagePath);
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].info('Carthage not found. Install using `brew install carthage`');

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Carthage'));

          case 12:
            if (context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug('Running WebDriverAgent bootstrap script to install dependencies');
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('/bin/bash', ['Scripts/bootstrap.sh', '-d'], { cwd: this.bootstrapPath }));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources'));

          case 18:
            if (context$2$0.sent) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resources directory');
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources'));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 24:
            if (context$2$0.sent) {
              context$2$0.next = 28;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resource bundle directory');
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7]]);
    }
  }, {
    key: 'createXcodeBuildSubProcess',
    value: function createXcodeBuildSubProcess() {
      var cmd, args, xcodebuild, logXcodeOutput;
      return _regeneratorRuntime.async(function createXcodeBuildSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = 'xcodebuild';
            args = ['build', 'test', '-project', this.agentPath, '-scheme', 'WebDriverAgentRunner', '-destination', 'id=' + this.device.udid, '-configuration', 'Debug'];

            if (this.realDevice) {
              cmd = _path2['default'].resolve(__dirname, '..', '..', 'bin', 'run-xcodebuild.sh');
              args = ['--project', this.agentPath, '--scheme', 'WebDriverAgentRunner', '--destination', 'id=' + this.device.udid];
              if (this.xcodeConfigFile) {
                _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
                args.push('--xcode-config-file', '"' + this.xcodeConfigFile + '"');
              }
              if (this.keychainPath && this.keychainPassword) {
                args.push('--keychain-path', this.keychainPath);
                args.push('--keychain-password', this.keychainPassword);
              }
            }

            _logger2['default'].debug('Beginning test with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            xcodebuild = new _teen_process.SubProcess(cmd, args, { cwd: this.bootstrapPath });
            logXcodeOutput = this.showXcodeLog;

            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                var logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              if (out.indexOf('Error Domain=') !== -1) {
                logXcodeOutput = true;
              }

              if (logXcodeOutput) {
                xcodeLog.info(out);
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSimLogsSubProcess',
    value: function createSimLogsSubProcess() {
      var args, logs;
      return _regeneratorRuntime.async(function createSimLogsSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['-f', '-n', '0', _path2['default'].resolve(this.device.getLogDir(), 'system.log')];
            logs = new _teen_process.SubProcess('tail', args);

            this.setupLogging(logs, 'Sim');
            return context$2$0.abrupt('return', logs);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createiProxySubProcess',
    value: function createiProxySubProcess(localport, deviceport) {
      _logger2['default'].debug('Starting iproxy to forward traffic from local port ' + localport + ' to device port ' + deviceport + ' over USB');
      return new _teen_process.SubProcess('iproxy', [localport, deviceport, this.device.udid]);
    }
  }, {
    key: 'createRealDeviceLogsSubProcess',
    value: function createRealDeviceLogsSubProcess() {
      var checkForLogger, logs;
      return _regeneratorRuntime.async(function createRealDeviceLogsSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            checkForLogger = function checkForLogger(logger) {
              return _regeneratorRuntime.async(function checkForLogger$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.which(logger));

                  case 3:
                    context$3$0.next = 10;
                    break;

                  case 5:
                    context$3$0.prev = 5;
                    context$3$0.t0 = context$3$0['catch'](0);
                    context$3$0.next = 9;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(logger));

                  case 9:
                    return context$3$0.abrupt('return', context$3$0.sent);

                  case 10:
                    return context$3$0.abrupt('return', true);

                  case 11:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[0, 5]]);
            };

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(checkForLogger(this.realDeviceLogger));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            throw new Error('Unable to find real device logging program \'' + this.realDeviceLogger + '\'');

          case 5:
            logs = new _teen_process.SubProcess('' + this.realDeviceLogger, ['-u', this.device.udid]);

            this.setupLogging(logs, 'Device');
            return context$2$0.abrupt('return', logs);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupLogging',
    value: function setupLogging(logs, prefix) {
      var _this = this;

      var loggingStarted = !this.realDevice;
      var startTime = new Date();
      function shouldStartLogging(row) {
        var logRowParts = row.split(/\s+/);
        var logRowDate = new Date(startTime.getFullYear() + ' ' + logRowParts[0] + ' ' + logRowParts[1] + ' ' + logRowParts[2]);
        loggingStarted = logRowDate.isAfter(startTime);
        return loggingStarted;
      }

      function isPertinentLogLine(line) {
        return line.length && (line.indexOf(AGENT_LOG_PREFIX) !== -1 || line.indexOf(AGENT_RUNNER_LOG_PREFIX) !== -1 || line.indexOf(SIM_BRIDGE_LOG_PREFIX) !== -1);
      }

      if (this.realDevice && this.realDeviceLogger.indexOf('idevicesyslog') !== -1) {
        // we are using idevicesyslog, which sometimes cannot connect to the device
        // at which time the system will not be able to figure out that the process
        // has started
        logs.on('output', function (stdout, stderr) {
          var errorString = 'Could not start logger for udid';
          if (stdout.indexOf(errorString) !== -1 || stderr.indexOf(errorString) !== -1) {
            // unfortunately we have no way to stopping the process, so just log overtly
            var msg = 'The real device logger \'' + _this.realDeviceLogger + '\' was ' + 'unable to start log capture. Please try installing ' + '\'deviceconsole\' (\'npm install -g deviceconsole\') and ' + 'specify the path to it using the \'realDeviceLogger\' capability.';
            _logger2['default'].error(msg);
          }
        });
      }

      if (!this.iosLogAlreadyShown) {
        logs.on('output', function (stdout, stderr) {
          var out = stdout || stderr;
          // make sure we are not reading logs from before this test run
          if (!loggingStarted && !shouldStartLogging(out)) {
            return;
          }
          if (isPertinentLogLine(out)) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _getIterator(out.split("\n").filter(Boolean)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var line = _step.value;

                agentLog.debug(prefix + ': ' + line);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        });
      }
    }
  }, {
    key: 'startXcodebuild',
    value: function startXcodebuild() {
      return _regeneratorRuntime.async(function startXcodebuild$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var startTime, agentUrl, msg;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.xcodebuild.on('exit', function (code, signal) {
                      _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                      if (!signal && code !== 0) {
                        return reject(new Error('xcodebuild failed with code ' + code));
                      }
                    });

                    this.deviceLogs.on('exit', function (code) {
                      var msg = (_this2.realDevice ? 'System' : 'Simulator') + ' log exited with code \'' + code + '\'';
                      _logger2['default'].info(msg);
                      if (code) {
                        return reject(msg);
                      }
                    });

                    context$3$0.prev = 2;
                    startTime = new Date();
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(this.xcodebuild.start());

                  case 6:
                    context$3$0.next = 8;
                    return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                  case 8:
                    agentUrl = context$3$0.sent;

                    resolve(agentUrl);
                    context$3$0.next = 17;
                    break;

                  case 12:
                    context$3$0.prev = 12;
                    context$3$0.t0 = context$3$0['catch'](2);
                    msg = 'Unable to start WebDriverAgent: ' + context$3$0.t0;

                    _logger2['default'].error(msg);
                    return context$3$0.abrupt('return', reject(msg));

                  case 17:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[2, 12]]);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var agentUrl, lineCount, reachedEnd, startDetector;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.realDevice) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _simulatorManagementJs.systemLogExists)(this.device));

          case 3:
            agentUrl = undefined;
            lineCount = 0;
            reachedEnd = !this.realDevice;

            startDetector = function startDetector(stdout) {
              // on a real device there may already be system logs that need to be
              // passed before we get to the real startup logs, otherwise
              // we expect two lines, one after another
              //     Jul 20 13:03:57 iamPhone XCTRunner[296] <Warning>: Built at Jul 20 2016 13:03:50
              //     Jul 20 13:03:57 iamPhone XCTRunner[296] <Warning>: ServerURLHere->http://10.35.4.122:8100<-ServerURLHere
              if (!reachedEnd) {
                var dateMatch = LOG_STARTTIME_REGEX.exec(stdout);
                if (dateMatch) {
                  var buildTime = new Date(dateMatch[1]);
                  if (buildTime.isAfter(startTime)) {
                    reachedEnd = true;
                  }
                }
              }

              if (reachedEnd) {
                var match = AGENT_STARTED_REGEX.exec(stdout);
                if (match) {
                  agentUrl = match[1];
                  _logger2['default'].info('Detected that WebDriverAgent is running at url \'' + agentUrl + '\'');
                  if (!agentUrl) {
                    _logger2['default'].errorAndThrow(new Error('No url detected from WebDriverAgent'));
                  }
                  return true;
                }
              }

              // periodically log, so it does not look like everything died
              lineCount++;
              var threshold = _this4.realDevice ? 1000 : 200;
              if (lineCount % threshold === 0) {
                _logger2['default'].debug('Waiting for WebDriverAgent server to finish loading...');
              }

              return false;
            };

            _logger2['default'].info('Waiting for WebDriverAgent to start on device');
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.deviceLogs.start(startDetector));

          case 10:
            _logger2['default'].info('WebDriverAgent started at url \'' + agentUrl + '\'');

            return context$2$0.abrupt('return', agentUrl);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startiproxy',
    value: function startiproxy() {
      return _regeneratorRuntime.async(function startiproxy$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.iproxy.on('exit', function (code) {
                      if (code) {
                        return reject(new Error('iproxy exited with code \'' + code + '\''));
                      }
                    });
                    this.iproxy.on('output', function (stdout, stderr) {
                      var out = stdout || stderr;
                      var _iteratorNormalCompletion2 = true;
                      var _didIteratorError2 = false;
                      var _iteratorError2 = undefined;

                      try {
                        for (var _iterator2 = _getIterator(out.split('\n')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                          var line = _step2.value;

                          if (!line.length) continue;
                          iproxyLog.debug(line);
                        }
                      } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                          }
                        } finally {
                          if (_didIteratorError2) {
                            throw _iteratorError2;
                          }
                        }
                      }
                    });

                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.iproxy.start(2000));

                  case 4:
                    resolve();

                  case 5:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this5);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'quit',
    value: function quit() {
      var getStopPromises;
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        var _this6 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Shutting down WebDriverAgent');

            getStopPromises = function getStopPromises(signal) {
              var stops = [];
              if (_this6.xcodebuild && _this6.xcodebuild.proc) {
                stops.push(_this6.xcodebuild.stop(signal));
              }
              if (_this6.deviceLogs && _this6.deviceLogs.proc) {
                stops.push(_this6.deviceLogs.stop(signal));
              }
              if (_this6.iproxy && _this6.iproxy.proc) {
                stops.push(_this6.iproxy.stop(signal));
              }
              return stops;
            };

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(getStopPromises()));

          case 6:
            context$2$0.next = 15;
            break;

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](3);

            if (!(context$2$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
              context$2$0.next = 12;
              break;
            }

            throw context$2$0.t0;

          case 12:
            _logger2['default'].debug('WebDriverAgent process did not end in a timely fashion. ' + 'Sending SIGHUP signal...');
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(getStopPromises('SIGHUP')));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 8]]);
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
module.exports = exports['default'];

// ensure there are no dangling xcode processes before building a new one.

// make sure that the WDA library has been built

// start the logging process

// start the xcodebuild process

// the logger can be the name of a program on the PATH
// or a path to the program

// not on the PATH, so see if it is an accessible path itself

// no error thrown, so all is well

// we have no logger

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// we have to wait for the sim to start before we can tail the log file
// simulator does not need to wait, since we are tailing
//# sourceMappingURL=data:application/json;charset=utf8;base64,
